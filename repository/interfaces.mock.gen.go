// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetTestById mocks base method.
func (m *MockRepositoryInterface) GetTestById(ctx context.Context, input GetTestByIdInput) (GetTestByIdOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestById", ctx, input)
	ret0, _ := ret[0].(GetTestByIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestById indicates an expected call of GetTestById.
func (mr *MockRepositoryInterfaceMockRecorder) GetTestById(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestById", reflect.TypeOf((*MockRepositoryInterface)(nil).GetTestById), ctx, input)
}

// GetUsersByPhoneNumber mocks base method.
func (m *MockRepositoryInterface) GetUsersByPhoneNumber(ctx context.Context, userPhoneNumber string) (GetUsersByPhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByPhoneNumber", ctx, userPhoneNumber)
	ret0, _ := ret[0].(GetUsersByPhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByPhoneNumber indicates an expected call of GetUsersByPhoneNumber.
func (mr *MockRepositoryInterfaceMockRecorder) GetUsersByPhoneNumber(ctx, userPhoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByPhoneNumber", reflect.TypeOf((*MockRepositoryInterface)(nil).GetUsersByPhoneNumber), ctx, userPhoneNumber)
}

// Register mocks base method.
func (m *MockRepositoryInterface) Register(ctx context.Context, input RegisterInput) (RegisterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, input)
	ret0, _ := ret[0].(RegisterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockRepositoryInterfaceMockRecorder) Register(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRepositoryInterface)(nil).Register), ctx, input)
}

// UpdateLoginCounter mocks base method.
func (m *MockRepositoryInterface) UpdateLoginCounter(ctx context.Context, input int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoginCounter", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLoginCounter indicates an expected call of UpdateLoginCounter.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateLoginCounter(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoginCounter", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateLoginCounter), ctx, input)
}
