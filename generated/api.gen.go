// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.14.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// BadRequestResponse defines model for BadRequestResponse.
type BadRequestResponse struct {
	Detail  []string `json:"detail"`
	Message string   `json:"message"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password    string `json:"password"`
	PhoneNumber string `json:"phone_number"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Id    int    `json:"id"`
	Token string `json:"token"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	FullName    string `json:"full_name"`
	Password    string `json:"password"`
	PhoneNumber string `json:"phone_number"`
}

// RegisterResponse defines model for RegisterResponse.
type RegisterResponse struct {
	Id int `json:"id"`
}

// UpdateProfileRequest defines model for UpdateProfileRequest.
type UpdateProfileRequest struct {
	FullName    *string `json:"full_name,omitempty"`
	PhoneNumber *string `json:"phone_number,omitempty"`
}

// UpdateProfileResponse defines model for UpdateProfileResponse.
type UpdateProfileResponse struct {
	Message string `json:"message"`
}

// UserDetailResponse defines model for UserDetailResponse.
type UserDetailResponse struct {
	FullName    string `json:"full_name"`
	Id          *int   `json:"id,omitempty"`
	PhoneNumber string `json:"phone_number"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// RegistrationJSONRequestBody defines body for Registration for application/json ContentType.
type RegistrationJSONRequestBody = RegisterRequest

// UpdateProfileJSONRequestBody defines body for UpdateProfile for application/json ContentType.
type UpdateProfileJSONRequestBody = UpdateProfileRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login endpoint.
	// (POST /login)
	Login(ctx echo.Context) error
	// User Registration Endpoint.
	// (POST /registration)
	Registration(ctx echo.Context) error
	// Update Profile Endpoint.
	// (PUT /users)
	UpdateProfile(ctx echo.Context) error
	// Get My Profile endpoint. Return User Data By ID.
	// (GET /users/{id})
	GetUserDetailByID(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Registration converts echo context to params.
func (w *ServerInterfaceWrapper) Registration(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Registration(ctx)
	return err
}

// UpdateProfile converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateProfile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"users:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateProfile(ctx)
	return err
}

// GetUserDetailByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserDetailByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{"users:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserDetailByID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/login", wrapper.Login)
	router.POST(baseURL+"/registration", wrapper.Registration)
	router.PUT(baseURL+"/users", wrapper.UpdateProfile)
	router.GET(baseURL+"/users/:id", wrapper.GetUserDetailByID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9SWX0/zNhTGv0rk7TJqyuBmuVspoE5jmgpoF1WF3Pi0NUvscHwMyqp891e2+y80pQLR",
	"ivcucRw/x49/PucsWKaLUitQZFi6YCabQ8H9Y4+LITxbMDQEU2plwI2WqEtAkuDnCCAuc/ckCQo/RFUJ",
	"LGWGUKoZq+PVAEfklXsvwBg+g5a5dcwQnq1EECwdrSfGK5nxejE9eYKM3GpXiBr3B/hhsTaNv/RMqqUX",
	"uxIlN+ZVo2jdfDnXCh6VLSaAh4NozI43K78T1L6Ny+14pCKYAfrT0P+BOhyJFGw1t018CDNpCHCvKVOb",
	"54+KF9DuytEs2+gesG+zg485uOtT2+oPpeAE/6Ceyhw+a9JBHw7JHvVSPBjAvr+X+4Xe3+A+RD8GQOPE",
	"t//cDbqOmYHMoqTqzuW5EOQEOAL+YWm+ebvWWHBiKfvz33sWh6zoVgpf2XrlOVHJarewVFPt/s9lBksv",
	"wsbZ7eDeXzxJuXt1vkV3gC8ycyG/ABqpFUvZWafb6bqZugTFS8lSdu6HHMk097Emubv13mgdiHJ2c5Ja",
	"DQRLQ1JgwSAw1NOicpMyrQiUn8/LMpeZ/yN5Mlptkr57+hVhylL2S7KpCsmyJCSNLFg3j4HQgh8IJPhY",
	"f+t2v1p7yZkXF2AylCUF8+5sloExzr6LL9RtVpcW3R4X0doTp31xOu2/NUVTbZUIZNui4FitIIhAiVJL",
	"RR3/NUGf7wIq+/kZbs86DkZvS8eJSdrJ+6eDqaWh+kmI8jlrm43oqkmXNYChGbItVDXK0pGwaq24J2ar",
	"vfweAuzsdOf7oDjNNcr/QQTt89NpX2ucSCFARZdaQJD//XTyl1pNc/mmC2DpqFn/R8yTnL6ycT1u3AB/",
	"tNHybFvxTxZS1C7OGbTcgRugTcfUqwZ9X9aRF0D+6owWzBV2X+pZvOodfBveBDjecmSnOR0fk+7dhu97",
	"oW2/DdufQuwGKLqt1oit63c0BLKoIp+E+5x41KuiQb8TAjGALyuALObLnjRNklxnPJ+7Kl+P6x8BAAD/",
	"/wvEW9rnDwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
